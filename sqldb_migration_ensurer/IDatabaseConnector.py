import abc
from typing import Iterable, OrderedDict, Any

from sqldb_migration_ensurer.RowView import RowView


class IDatabaseConnector(abc.ABC):

    @abc.abstractmethod
    def connect(self, **kwargs):
        """
        Connect to the database
        :param kwargs:
        :return:
        """
        pass

    @abc.abstractmethod
    def disconnect(self, **kwargs):
        """
        Disconnect to the database
        :param kwargs:
        :return:
        """
        pass

    @abc.abstractmethod
    def is_connected(self) -> bool:
        """

        :return: True if we are connected to the database
        """
        pass

    @abc.abstractmethod
    def support_fetching_query_column_type_while_running_query(self) -> bool:
        """
        If true, the database connectors allows to fetch the data type of each column generated by a SELECT query
        while iterating over the outputed rows. If False, we need to run a separated query allowing us to fetch the
        column datatypes
        :return:
        """
        pass

    @abc.abstractmethod
    def query(self, query: str, **kwargs) -> Iterable[RowView]:
        """
        Execute a query on the database like SELECT

        :param query: the query to perform
        :param kwargs: additional parameter, database dependent. This values are set by the IDatabaseConnector instance
        :return: iterable of rows, generated by the database
        """
        pass

    @abc.abstractmethod
    def get_database_names(self) -> Iterable[str]:
        pass